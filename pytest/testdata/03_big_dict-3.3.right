# Source code size mod 2**32: 4714 bytes
# Method Name:       <module>
# Filename:          simple_source/03_big_dict.py
# Argument count:    0
# Keyword-only arguments: 0
# Number of locals:  0
# Stack size:        6
# Flags:             0x00000040 (NOFREE)
# First Line:        1
# Constants:
#    0: '+'
#    1: 'BINARY_ADD'
#    2: '-'
#    3: 'BINARY_SUBTRACT'
#    4: '*'
#    5: 'BINARY_MULTIPLY'
#    6: '/'
#    7: 'BINARY_DIVIDE'
#    8: '@'
#    9: 'BINARY_MATRIX_MULTIPLY'
#   10: 'BINARY_TRUE_DIVIDE'
#   11: '//'
#   12: 'BINARY_FLOOR_DIVIDE'
#   13: '%%'
#   14: 'BINARY_MODULO'
#   15: '**'
#   16: 'BINARY_POWER'
#   17: '<<'
#   18: 'BINARY_LSHIFT'
#   19: '>>'
#   20: 'BINARY_RSHIFT'
#   21: '&'
#   22: 'BINARY_AND'
#   23: '|'
#   24: 'BINARY_OR'
#   25: '^'
#   26: 'BINARY_XOR'
#   27: '+='
#   28: 'INPLACE_ADD'
#   29: '-='
#   30: 'INPLACE_SUBTRACT'
#   31: '*='
#   32: 'INPLACE_MULTIPLY'
#   33: '@='
#   34: 'INPLACE_MATRIX_MULTIPLY'
#   35: '/='
#   36: 'INPLACE_DIVIDE'
#   37: 'INPLACE_TRUE_DIVIDE'
#   38: '//='
#   39: 'INPLACE_FLOOR_DIVIDE'
#   40: '%%='
#   41: 'INPLACE_MODULO'
#   42: '**='
#   43: 'INPLACE_POWER'
#   44: '<<='
#   45: 'INPLACE_LSHIFT'
#   46: '>>='
#   47: 'INPLACE_RSHIFT'
#   48: '&='
#   49: 'INPLACE_AND'
#   50: '|='
#   51: 'INPLACE_OR'
#   52: '^='
#   53: 'INPLACE_XOR'
#   54: '%c %c %c'
#   55: 0
#   56: 1
#   57: 'binary_expr'
#   58: 'UNARY_POSITIVE'
#   59: 'UNARY_NEGATIVE'
#   60: '~%c'
#   61: 'UNARY_INVERT'
#   62: '%c%c'
#   63: 'unary_expr'
#   64: 'not %c'
#   65: 'unary_not'
#   66: '`%c`'
#   67: 'unary_convert'
#   68: 'iter(%c)'
#   69: 'get_iter'
#   70: '%c[:]'
#   71: 'slice0'
#   72: '%c[%p:]'
#   73: 100
#   74: 'slice1'
#   75: '%c[:%p]'
#   76: 'slice2'
#   77: '%c[%p:%p]'
#   78: 2
#   79: 'slice3'
#   80: '%{pattr}'
#   81: 'IMPORT_FROM'
#   82: '%c.%[1]{pattr}'
#   83: 'load_attr'
#   84: 'LOAD_FAST'
#   85: 'LOAD_NAME'
#   86: 'LOAD_CLASSNAME'
#   87: 'LOAD_GLOBAL'
#   88: 'LOAD_DEREF'
#   89: 'locals()'
#   90: 'LOAD_LOCALS'
#   91: 'LOAD_ASSERT'
#   92: '%|del %{pattr}\n'
#   93: 'DELETE_FAST'
#   94: 'DELETE_NAME'
#   95: 'DELETE_GLOBAL'
#   96: '%|del %c[%c]\n'
#   97: 'delete_subscr'
#   98: '%c[%p]'
#   99: 'binary_subscr'
#  100: 'binary_subscr2'
#  101: '%c[%c]'
#  102: 'store_subscr'
#  103: 'STORE_FAST'
#  104: 'STORE_NAME'
#  105: 'STORE_GLOBAL'
#  106: 'STORE_DEREF'
#  107: '%C%,'
#  108: 5
#  109: ', '
#  110: 'unpack'
#  111: '(%C%,)'
#  112: 10
#  113: 'unpack_w_parens'
#  114: '[%C]'
#  115: 15
#  116: 'unpack_list'
#  117: '%P'
#  118: 'build_tuple2'
#  119: '%c'
#  120: 'list_iter'
#  121: ' for %c in %c%c'
#  122: 3
#  123: 'list_for'
#  124: ' if %c%c'
#  125: 'list_if'
#  126: ' if not %p%c'
#  127: 22
#  128: 'list_if_not'
#  129: ''
#  130: 'lc_body'
#  131: 'comp_body'
#  132: 'set_comp_body'
#  133: 'gen_comp_body'
#  134: '%c:%c'
#  135: 'dict_comp_body'
#  136: '%|%c = %p\n'
#  137: 200
#  138: 'assign'
#  139: '%|%c %c %c\n'
#  140: 'augassign1'
#  141: '%|%c.%[2]{pattr} %c %c\n'
#  142: 4
#  143: 'augassign2'
#  144: '%c = %c'
#  145: 'designList'
#  146: '%c and %c'
#  147: 'and'
#  148: 'ret_and'
#  149: 'and2'
#  150: '%c or %c'
#  151: 'or'
#  152: 'ret_or'
#  153: '%p if %p else %p'
#  154: 27
#  155: 'conditional'
#  156: '%p if 1 else %p'
#  157: 'conditionalTrue'
#  158: 'ret_cond'
#  159: '%p if not %p else %p'
#  160: 'conditionalnot'
#  161: 'ret_cond_not'
#  162: '(%c if %c else %c)'
#  163: 'conditional_lambda'
#  164: 'return_lambda'
#  165: '%p %[-1]{pattr} %p'
#  166: 19
#  167: 'compare'
#  168: '%p %p'
#  169: 29
#  170: 30
#  171: 'cmp_list'
#  172: '%[3]{pattr} %p %p'
#  173: 'cmp_list1'
#  174: '%[1]{pattr} %p'
#  175: 'cmp_list2'
#  176: '\n\n%|def %c\n'
#  177: 'funcdef'
#  178: '\n\n%c'
#  179: 'funcdefdeco'
#  180: '%|@%c\n%c'
#  181: 'mkfuncdeco'
#  182: '%|def %c\n'
#  183: 'mkfuncdeco0'
#  184: 'classdefdeco'
#  185: 'classdefdeco1'
#  186: '%[0]{pattr}=%c'
#  187: 'kwarg'
#  188: '%D'
#  189: 10000
#  190: 'kwargs'
#  191: 'assert_expr_or'
#  192: 'assert_expr_and'
#  193: '%|print %c%c,\n'
#  194: 'print_items_stmt'
#  195: '%|print %c%c\n'
#  196: 'print_items_nl_stmt'
#  197: ', %c'
#  198: 'print_item'
#  199: '%|print\n'
#  200: 'print_nl'
#  201: '%|print >> %c, %c,\n'
#  202: 'print_to'
#  203: '%|print >> %c, %c\n'
#  204: 'print_to_nl'
#  205: '%|print >> %c\n'
#  206: 'print_nl_to'
#  207: '%C'
#  208: 'print_to_items'
#  209: '%c: %c'
#  210: 'kv'
#  211: 'kv2'
#  212: None
#  213: ('+',)
#  214: ('-',)
#  215: ('*',)
#  216: ('/',)
#  217: ('@',)
#  218: ('/',)
#  219: ('//',)
#  220: ('%%',)
#  221: ('**',)
#  222: ('<<',)
#  223: ('>>',)
#  224: ('&',)
#  225: ('|',)
#  226: ('^',)
#  227: ('+=',)
#  228: ('-=',)
#  229: ('*=',)
#  230: ('@=',)
#  231: ('/=',)
#  232: ('/=',)
#  233: ('//=',)
#  234: ('%%=',)
#  235: ('**=',)
#  236: ('<<=',)
#  237: ('>>=',)
#  238: ('&=',)
#  239: ('|=',)
#  240: ('^=',)
#  241: -1
#  242: ('%c %c %c', 0, -1, 1)
#  243: ('+',)
#  244: ('-',)
#  245: ('%c%c', 1, 0)
#  246: ('not %c', 0)
#  247: ('`%c`', 0)
#  248: ('iter(%c)', 0)
#  249: ('%c[:]', 0)
#  250: (1, 100)
#  251: ('%c[%p:]', 0, (1, 100))
#  252: (1, 100)
#  253: ('%c[:%p]', 0, (1, 100))
#  254: (1, 100)
#  255: (2, 100)
#  256: ('%c[%p:%p]', 0, (1, 100), (2, 100))
#  257: ('%{pattr}',)
#  258: ('%c.%[1]{pattr}', 0)
#  259: ('%{pattr}',)
#  260: ('%{pattr}',)
#  261: ('%{pattr}',)
#  262: ('%{pattr}',)
#  263: ('%{pattr}',)
#  264: ('locals()',)
#  265: ('%{pattr}',)
#  266: ('%|del %{pattr}\n',)
#  267: ('%|del %{pattr}\n',)
#  268: ('%|del %{pattr}\n',)
#  269: ('%|del %c[%c]\n', 0, 1)
#  270: (1, 100)
#  271: ('%c[%p]', 0, (1, 100))
#  272: (1, 100)
#  273: ('%c[%p]', 0, (1, 100))
#  274: ('%c[%c]', 0, 1)
#  275: ('%{pattr}',)
#  276: ('%{pattr}',)
#  277: ('%{pattr}',)
#  278: ('%{pattr}',)
#  279: (1, 5, ', ')
#  280: ('%C%,', (1, 5, ', '))
#  281: (1, 10, ', ')
#  282: ('(%C%,)', (1, 10, ', '))
#  283: (1, 15, ', ')
#  284: ('[%C]', (1, 15, ', '))
#  285: -1
#  286: (0, -1, ', ', 100)
#  287: ('%P', (0, -1, ', ', 100))
#  288: ('%c', 0)
#  289: (' for %c in %c%c', 2, 0, 3)
#  290: (' if %c%c', 0, 2)
#  291: (0, 22)
#  292: (' if not %p%c', (0, 22), 2)
#  293: ('',)
#  294: ('',)
#  295: ('%c', 0)
#  296: ('%c', 0)
#  297: ('%c:%c', 1, 0)
#  298: -1
#  299: (0, 200)
#  300: ('%|%c = %p\n', -1, (0, 200))
#  301: ('%|%c %c %c\n', 0, 2, 1)
#  302: -3
#  303: -4
#  304: ('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4)
#  305: -1
#  306: ('%c = %c', 0, -1)
#  307: ('%c and %c', 0, 2)
#  308: ('%c and %c', 0, 2)
#  309: ('%c', 3)
#  310: ('%c or %c', 0, 2)
#  311: ('%c or %c', 0, 2)
#  312: (2, 27)
#  313: (0, 27)
#  314: (4, 27)
#  315: ('%p if %p else %p', (2, 27), (0, 27), (4, 27))
#  316: (0, 27)
#  317: (2, 27)
#  318: ('%p if 1 else %p', (0, 27), (2, 27))
#  319: (2, 27)
#  320: (0, 27)
#  321: -1
#  322: (-1, 27)
#  323: ('%p if %p else %p', (2, 27), (0, 27), (-1, 27))
#  324: (2, 27)
#  325: (0, 22)
#  326: (4, 27)
#  327: ('%p if not %p else %p', (2, 27), (0, 22), (4, 27))
#  328: (2, 27)
#  329: (0, 22)
#  330: -1
#  331: (-1, 27)
#  332: ('%p if not %p else %p', (2, 27), (0, 22), (-1, 27))
#  333: ('(%c if %c else %c)', 2, 0, 3)
#  334: ('%c', 0)
#  335: (0, 19)
#  336: (1, 19)
#  337: ('%p %[-1]{pattr} %p', (0, 19), (1, 19))
#  338: (0, 29)
#  339: (1, 30)
#  340: ('%p %p', (0, 29), (1, 30))
#  341: (0, 19)
#  342: -2
#  343: (-2, 19)
#  344: ('%[3]{pattr} %p %p', (0, 19), (-2, 19))
#  345: (0, 19)
#  346: ('%[1]{pattr} %p', (0, 19))
#  347: -2
#  348: ('\n\n%|def %c\n', -2)
#  349: ('\n\n%c', 0)
#  350: ('%|@%c\n%c', 0, 1)
#  351: ('%|def %c\n', 0)
#  352: ('\n\n%c', 0)
#  353: ('%|@%c\n%c', 0, 1)
#  354: ('%[0]{pattr}=%c', 1)
#  355: (0, 10000, ', ')
#  356: ('%D', (0, 10000, ', '))
#  357: ('%c or %c', 0, 2)
#  358: ('%c and %c', 0, 2)
#  359: ('%|print %c%c,\n', 0, 2)
#  360: ('%|print %c%c\n', 0, 2)
#  361: (', %c', 0)
#  362: ('%|print\n',)
#  363: ('%|print >> %c, %c,\n', 0, 1)
#  364: ('%|print >> %c, %c\n', 0, 1)
#  365: ('%|print >> %c\n', 0)
#  366: (0, 2, ', ')
#  367: ('%C', (0, 2, ', '))
#  368: ('%c: %c', 3, 1)
#  369: ('%c: %c', 1, 2)
# Names:
#    0: TABLE_DIRECT
  1:           0 BUILD_MAP            113

  2:           3 LOAD_CONST           (('+',))
               6 LOAD_CONST           ("BINARY_ADD")
               9 STORE_MAP

  3:          10 LOAD_CONST           (('-',))
              13 LOAD_CONST           ("BINARY_SUBTRACT")
              16 STORE_MAP

  4:          17 LOAD_CONST           (('*',))
              20 LOAD_CONST           ("BINARY_MULTIPLY")
              23 STORE_MAP

  5:          24 LOAD_CONST           (('/',))
              27 LOAD_CONST           ("BINARY_DIVIDE")
              30 STORE_MAP

  6:          31 LOAD_CONST           (('@',))
              34 LOAD_CONST           ("BINARY_MATRIX_MULTIPLY")
              37 STORE_MAP

  7:          38 LOAD_CONST           (('/',))
              41 LOAD_CONST           ("BINARY_TRUE_DIVIDE")
              44 STORE_MAP

  8:          45 LOAD_CONST           (('//',))
              48 LOAD_CONST           ("BINARY_FLOOR_DIVIDE")
              51 STORE_MAP

  9:          52 LOAD_CONST           (('%%',))
              55 LOAD_CONST           ("BINARY_MODULO")
              58 STORE_MAP

 10:          59 LOAD_CONST           (('**',))
              62 LOAD_CONST           ("BINARY_POWER")
              65 STORE_MAP

 11:          66 LOAD_CONST           (('<<',))
              69 LOAD_CONST           ("BINARY_LSHIFT")
              72 STORE_MAP

 12:          73 LOAD_CONST           (('>>',))
              76 LOAD_CONST           ("BINARY_RSHIFT")
              79 STORE_MAP

 13:          80 LOAD_CONST           (('&',))
              83 LOAD_CONST           ("BINARY_AND")
              86 STORE_MAP

 14:          87 LOAD_CONST           (('|',))
              90 LOAD_CONST           ("BINARY_OR")
              93 STORE_MAP

 15:          94 LOAD_CONST           (('^',))
              97 LOAD_CONST           ("BINARY_XOR")
             100 STORE_MAP

 16:         101 LOAD_CONST           (('+=',))
             104 LOAD_CONST           ("INPLACE_ADD")
             107 STORE_MAP

 17:         108 LOAD_CONST           (('-=',))
             111 LOAD_CONST           ("INPLACE_SUBTRACT")
             114 STORE_MAP

 18:         115 LOAD_CONST           (('*=',))
             118 LOAD_CONST           ("INPLACE_MULTIPLY")
             121 STORE_MAP

 19:         122 LOAD_CONST           (('@=',))
             125 LOAD_CONST           ("INPLACE_MATRIX_MULTIPLY")
             128 STORE_MAP

 20:         129 LOAD_CONST           (('/=',))
             132 LOAD_CONST           ("INPLACE_DIVIDE")
             135 STORE_MAP

 21:         136 LOAD_CONST           (('/=',))
             139 LOAD_CONST           ("INPLACE_TRUE_DIVIDE")
             142 STORE_MAP

 22:         143 LOAD_CONST           (('//=',))
             146 LOAD_CONST           ("INPLACE_FLOOR_DIVIDE")
             149 STORE_MAP

 23:         150 LOAD_CONST           (('%%=',))
             153 LOAD_CONST           ("INPLACE_MODULO")
             156 STORE_MAP

 24:         157 LOAD_CONST           (('**=',))
             160 LOAD_CONST           ("INPLACE_POWER")
             163 STORE_MAP

 25:         164 LOAD_CONST           (('<<=',))
             167 LOAD_CONST           ("INPLACE_LSHIFT")
             170 STORE_MAP

 26:         171 LOAD_CONST           (('>>=',))
             174 LOAD_CONST           ("INPLACE_RSHIFT")
             177 STORE_MAP

 27:         178 LOAD_CONST           (('&=',))
             181 LOAD_CONST           ("INPLACE_AND")
             184 STORE_MAP

 28:         185 LOAD_CONST           (('|=',))
             188 LOAD_CONST           ("INPLACE_OR")
             191 STORE_MAP

 29:         192 LOAD_CONST           (('^=',))
             195 LOAD_CONST           ("INPLACE_XOR")
             198 STORE_MAP

 30:         199 LOAD_CONST           (('%c %c %c', 0, -1, 1))
             202 LOAD_CONST           ("binary_expr")
             205 STORE_MAP

 32:         206 LOAD_CONST           (('+',))
             209 LOAD_CONST           ("UNARY_POSITIVE")
             212 STORE_MAP

 33:         213 LOAD_CONST           (('-',))
             216 LOAD_CONST           ("UNARY_NEGATIVE")
             219 STORE_MAP

 34:         220 LOAD_CONST           ("~%c")
             223 LOAD_CONST           ("UNARY_INVERT")
             226 STORE_MAP

 35:         227 LOAD_CONST           (('%c%c', 1, 0))
             230 LOAD_CONST           ("unary_expr")
             233 STORE_MAP

 37:         234 LOAD_CONST           (('not %c', 0))
             237 LOAD_CONST           ("unary_not")
             240 STORE_MAP

 38:         241 LOAD_CONST           (('`%c`', 0))
             244 LOAD_CONST           ("unary_convert")
             247 STORE_MAP

 39:         248 LOAD_CONST           (('iter(%c)', 0))
             251 LOAD_CONST           ("get_iter")
             254 STORE_MAP

 40:         255 LOAD_CONST           (('%c[:]', 0))
             258 LOAD_CONST           ("slice0")
             261 STORE_MAP

 41:         262 LOAD_CONST           (('%c[%p:]', 0, (1, 100)))
             265 LOAD_CONST           ("slice1")
             268 STORE_MAP

 42:         269 LOAD_CONST           (('%c[:%p]', 0, (1, 100)))
             272 LOAD_CONST           ("slice2")
             275 STORE_MAP

 43:         276 LOAD_CONST           (('%c[%p:%p]', 0, (1, 100), (2, 100)))
             279 LOAD_CONST           ("slice3")
             282 STORE_MAP

 45:         283 LOAD_CONST           (('%{pattr}',))
             286 LOAD_CONST           ("IMPORT_FROM")
             289 STORE_MAP

 46:         290 LOAD_CONST           (('%c.%[1]{pattr}', 0))
             293 LOAD_CONST           ("load_attr")
             296 STORE_MAP

 47:         297 LOAD_CONST           (('%{pattr}',))
             300 LOAD_CONST           ("LOAD_FAST")
             303 STORE_MAP

 48:         304 LOAD_CONST           (('%{pattr}',))
             307 LOAD_CONST           ("LOAD_NAME")
             310 STORE_MAP

 49:         311 LOAD_CONST           (('%{pattr}',))
             314 LOAD_CONST           ("LOAD_CLASSNAME")
             317 STORE_MAP

 50:         318 LOAD_CONST           (('%{pattr}',))
             321 LOAD_CONST           ("LOAD_GLOBAL")
             324 STORE_MAP

 51:         325 LOAD_CONST           (('%{pattr}',))
             328 LOAD_CONST           ("LOAD_DEREF")
             331 STORE_MAP

 52:         332 LOAD_CONST           (('locals()',))
             335 LOAD_CONST           ("LOAD_LOCALS")
             338 STORE_MAP

 53:         339 LOAD_CONST           (('%{pattr}',))
             342 LOAD_CONST           ("LOAD_ASSERT")
             345 STORE_MAP

 54:         346 LOAD_CONST           (('%|del %{pattr}\n',))
             349 LOAD_CONST           ("DELETE_FAST")
             352 STORE_MAP

 55:         353 LOAD_CONST           (('%|del %{pattr}\n',))
             356 LOAD_CONST           ("DELETE_NAME")
             359 STORE_MAP

 56:         360 LOAD_CONST           (('%|del %{pattr}\n',))
             363 LOAD_CONST           ("DELETE_GLOBAL")
             366 STORE_MAP

 57:         367 LOAD_CONST           (('%|del %c[%c]\n', 0, 1))
             370 LOAD_CONST           ("delete_subscr")
             373 STORE_MAP

 58:         374 LOAD_CONST           (('%c[%p]', 0, (1, 100)))
             377 LOAD_CONST           ("binary_subscr")
             380 STORE_MAP

 59:         381 LOAD_CONST           (('%c[%p]', 0, (1, 100)))
             384 LOAD_CONST           ("binary_subscr2")
             387 STORE_MAP

 60:         388 LOAD_CONST           (('%c[%c]', 0, 1))
             391 LOAD_CONST           ("store_subscr")
             394 STORE_MAP

 61:         395 LOAD_CONST           (('%{pattr}',))
             398 LOAD_CONST           ("STORE_FAST")
             401 STORE_MAP

 62:         402 LOAD_CONST           (('%{pattr}',))
             405 LOAD_CONST           ("STORE_NAME")
             408 STORE_MAP

 63:         409 LOAD_CONST           (('%{pattr}',))
             412 LOAD_CONST           ("STORE_GLOBAL")
             415 STORE_MAP

 64:         416 LOAD_CONST           (('%{pattr}',))
             419 LOAD_CONST           ("STORE_DEREF")
             422 STORE_MAP

 65:         423 LOAD_CONST           (('%C%,', (1, 5, ', ')))
             426 LOAD_CONST           ("unpack")
             429 STORE_MAP

 66:         430 LOAD_CONST           (('(%C%,)', (1, 10, ', ')))
             433 LOAD_CONST           ("unpack_w_parens")
             436 STORE_MAP

 68:         437 LOAD_CONST           (('[%C]', (1, 15, ', ')))
             440 LOAD_CONST           ("unpack_list")
             443 STORE_MAP

 69:         444 LOAD_CONST           (('%P', (0, -1, ', ', 100)))
             447 LOAD_CONST           ("build_tuple2")
             450 STORE_MAP

 71:         451 LOAD_CONST           (('%c', 0))
             454 LOAD_CONST           ("list_iter")
             457 STORE_MAP

 72:         458 LOAD_CONST           ((' for %c in %c%c', 2, 0, 3))
             461 LOAD_CONST           ("list_for")
             464 STORE_MAP

 73:         465 LOAD_CONST           ((' if %c%c', 0, 2))
             468 LOAD_CONST           ("list_if")
             471 STORE_MAP

 74:         472 LOAD_CONST           ((' if not %p%c', (0, 22), 2))
             475 LOAD_CONST           ("list_if_not")
             478 STORE_MAP

 75:         479 LOAD_CONST           (('',))
             482 LOAD_CONST           ("lc_body")
             485 STORE_MAP

 77:         486 LOAD_CONST           (('',))
             489 LOAD_CONST           ("comp_body")
             492 STORE_MAP

 78:         493 LOAD_CONST           (('%c', 0))
             496 LOAD_CONST           ("set_comp_body")
             499 STORE_MAP

 79:         500 LOAD_CONST           (('%c', 0))
             503 LOAD_CONST           ("gen_comp_body")
             506 STORE_MAP

 80:         507 LOAD_CONST           (('%c:%c', 1, 0))
             510 LOAD_CONST           ("dict_comp_body")
             513 STORE_MAP

 82:         514 LOAD_CONST           (('%|%c = %p\n', -1, (0, 200)))
             517 LOAD_CONST           ("assign")
             520 STORE_MAP

 84:         521 LOAD_CONST           (('%|%c %c %c\n', 0, 2, 1))
             524 LOAD_CONST           ("augassign1")
             527 STORE_MAP

 86:         528 LOAD_CONST           (('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4))
             531 LOAD_CONST           ("augassign2")
             534 STORE_MAP

 87:         535 LOAD_CONST           (('%c = %c', 0, -1))
             538 LOAD_CONST           ("designList")
             541 STORE_MAP

 88:         542 LOAD_CONST           (('%c and %c', 0, 2))
             545 LOAD_CONST           ("and")
             548 STORE_MAP

 89:         549 LOAD_CONST           (('%c and %c', 0, 2))
             552 LOAD_CONST           ("ret_and")
             555 STORE_MAP

 90:         556 LOAD_CONST           (('%c', 3))
             559 LOAD_CONST           ("and2")
             562 STORE_MAP

 91:         563 LOAD_CONST           (('%c or %c', 0, 2))
             566 LOAD_CONST           ("or")
             569 STORE_MAP

 92:         570 LOAD_CONST           (('%c or %c', 0, 2))
             573 LOAD_CONST           ("ret_or")
             576 STORE_MAP

 93:         577 LOAD_CONST           (('%p if %p else %p', (2, 27), (0, 27), (4, 27)))
             580 LOAD_CONST           ("conditional")
             583 STORE_MAP

 94:         584 LOAD_CONST           (('%p if 1 else %p', (0, 27), (2, 27)))
             587 LOAD_CONST           ("conditionalTrue")
             590 STORE_MAP

 95:         591 LOAD_CONST           (('%p if %p else %p', (2, 27), (0, 27), (-1, 27)))
             594 LOAD_CONST           ("ret_cond")
             597 STORE_MAP

 96:         598 LOAD_CONST           (('%p if not %p else %p', (2, 27), (0, 22), (4, 27)))
             601 LOAD_CONST           ("conditionalnot")
             604 STORE_MAP

 97:         605 LOAD_CONST           (('%p if not %p else %p', (2, 27), (0, 22), (-1, 27)))
             608 LOAD_CONST           ("ret_cond_not")
             611 STORE_MAP

 98:         612 LOAD_CONST           (('(%c if %c else %c)', 2, 0, 3))
             615 LOAD_CONST           ("conditional_lambda")
             618 STORE_MAP

 99:         619 LOAD_CONST           (('%c', 0))
             622 LOAD_CONST           ("return_lambda")
             625 STORE_MAP

100:         626 LOAD_CONST           (('%p %[-1]{pattr} %p', (0, 19), (1, 19)))
             629 LOAD_CONST           ("compare")
             632 STORE_MAP

101:         633 LOAD_CONST           (('%p %p', (0, 29), (1, 30)))
             636 LOAD_CONST           ("cmp_list")
             639 STORE_MAP

102:         640 LOAD_CONST           (('%[3]{pattr} %p %p', (0, 19), (-2, 19)))
             643 LOAD_CONST           ("cmp_list1")
             646 STORE_MAP

103:         647 LOAD_CONST           (('%[1]{pattr} %p', (0, 19)))
             650 LOAD_CONST           ("cmp_list2")
             653 STORE_MAP

104:         654 LOAD_CONST           (('\n\n%|def %c\n', -2))
             657 LOAD_CONST           ("funcdef")
             660 STORE_MAP

105:         661 LOAD_CONST           (('\n\n%c', 0))
             664 LOAD_CONST           ("funcdefdeco")
             667 STORE_MAP

106:         668 LOAD_CONST           (('%|@%c\n%c', 0, 1))
             671 LOAD_CONST           ("mkfuncdeco")
             674 STORE_MAP

107:         675 LOAD_CONST           (('%|def %c\n', 0))
             678 LOAD_CONST           ("mkfuncdeco0")
             681 STORE_MAP

108:         682 LOAD_CONST           (('\n\n%c', 0))
             685 LOAD_CONST           ("classdefdeco")
             688 STORE_MAP

109:         689 LOAD_CONST           (('%|@%c\n%c', 0, 1))
             692 LOAD_CONST           ("classdefdeco1")
             695 STORE_MAP

110:         696 LOAD_CONST           (('%[0]{pattr}=%c', 1))
             699 LOAD_CONST           ("kwarg")
             702 STORE_MAP

111:         703 LOAD_CONST           (('%D', (0, 10000, ', ')))
             706 LOAD_CONST           ("kwargs")
             709 STORE_MAP

113:         710 LOAD_CONST           (('%c or %c', 0, 2))
             713 LOAD_CONST           ("assert_expr_or")
             716 STORE_MAP

114:         717 LOAD_CONST           (('%c and %c', 0, 2))
             720 LOAD_CONST           ("assert_expr_and")
             723 STORE_MAP

115:         724 LOAD_CONST           (('%|print %c%c,\n', 0, 2))
             727 LOAD_CONST           ("print_items_stmt")
             730 STORE_MAP

116:         731 LOAD_CONST           (('%|print %c%c\n', 0, 2))
             734 LOAD_CONST           ("print_items_nl_stmt")
             737 STORE_MAP

117:         738 LOAD_CONST           ((', %c', 0))
             741 LOAD_CONST           ("print_item")
             744 STORE_MAP

118:         745 LOAD_CONST           (('%|print\n',))
             748 LOAD_CONST           ("print_nl")
             751 STORE_MAP

119:         752 LOAD_CONST           (('%|print >> %c, %c,\n', 0, 1))
             755 LOAD_CONST           ("print_to")
             758 STORE_MAP

120:         759 LOAD_CONST           (('%|print >> %c, %c\n', 0, 1))
             762 LOAD_CONST           ("print_to_nl")
             765 STORE_MAP

121:         766 LOAD_CONST           (('%|print >> %c\n', 0))
             769 LOAD_CONST           ("print_nl_to")
             772 STORE_MAP

122:         773 LOAD_CONST           (('%C', (0, 2, ', ')))
             776 LOAD_CONST           ("print_to_items")
             779 STORE_MAP

123:         780 LOAD_CONST           (('%c: %c', 3, 1))
             783 LOAD_CONST           ("kv")
             786 STORE_MAP

124:         787 LOAD_CONST           (('%c: %c', 1, 2))
             790 LOAD_CONST           ("kv2")
             793 STORE_MAP
             794 STORE_NAME           (TABLE_DIRECT)
             797 LOAD_CONST           (None)
             800 RETURN_VALUE

