# Source code size mod 2**32: 4714 bytes
# Method Name:       <module>
# Filename:          simple_source/03_big_dict.py
# Argument count:    0
# Position-only argument count: 0
# Keyword-only arguments: 0
# Number of locals:  0
# Stack size:        13
# Flags:             0x00000040 (NOFREE)
# First Line:        1
# Constants:
#    0: 'BINARY_ADD'
#    1: ('+',)
#    2: 'BINARY_SUBTRACT'
#    3: ('-',)
#    4: 'BINARY_MULTIPLY'
#    5: ('*',)
#    6: 'BINARY_DIVIDE'
#    7: ('/',)
#    8: 'BINARY_MATRIX_MULTIPLY'
#    9: ('@',)
#   10: 'BINARY_TRUE_DIVIDE'
#   11: 'BINARY_FLOOR_DIVIDE'
#   12: ('//',)
#   13: 'BINARY_MODULO'
#   14: ('%%',)
#   15: 'BINARY_POWER'
#   16: ('**',)
#   17: 'BINARY_LSHIFT'
#   18: ('<<',)
#   19: 'BINARY_RSHIFT'
#   20: ('>>',)
#   21: 'BINARY_AND'
#   22: ('&',)
#   23: 'BINARY_OR'
#   24: ('|',)
#   25: 'BINARY_XOR'
#   26: ('^',)
#   27: 'INPLACE_ADD'
#   28: ('+=',)
#   29: 'INPLACE_SUBTRACT'
#   30: ('-=',)
#   31: 'INPLACE_MULTIPLY'
#   32: ('*=',)
#   33: 'INPLACE_MATRIX_MULTIPLY'
#   34: ('@=',)
#   35: 'INPLACE_DIVIDE'
#   36: ('/=',)
#   37: 'INPLACE_TRUE_DIVIDE'
#   38: 'INPLACE_FLOOR_DIVIDE'
#   39: ('//=',)
#   40: 'INPLACE_MODULO'
#   41: ('%%=',)
#   42: 'INPLACE_POWER'
#   43: ('**=',)
#   44: 'INPLACE_LSHIFT'
#   45: ('<<=',)
#   46: 'INPLACE_RSHIFT'
#   47: ('>>=',)
#   48: 'INPLACE_AND'
#   49: ('&=',)
#   50: 'INPLACE_OR'
#   51: ('|=',)
#   52: 'INPLACE_XOR'
#   53: ('^=',)
#   54: 'binary_expr'
#   55: ('%c %c %c', 0, -1, 1)
#   56: 'UNARY_POSITIVE'
#   57: 'UNARY_NEGATIVE'
#   58: 'UNARY_INVERT'
#   59: '~%c'
#   60: 'unary_expr'
#   61: ('%c%c', 1, 0)
#   62: 'unary_not'
#   63: ('not %c', 0)
#   64: 'unary_convert'
#   65: ('`%c`', 0)
#   66: 'get_iter'
#   67: ('iter(%c)', 0)
#   68: 'slice0'
#   69: ('%c[:]', 0)
#   70: 'slice1'
#   71: ('%c[%p:]', 0, (1, 100))
#   72: 'slice2'
#   73: ('%c[:%p]', 0, (1, 100))
#   74: 'slice3'
#   75: ('%c[%p:%p]', 0, (1, 100), (2, 100))
#   76: 'IMPORT_FROM'
#   77: ('%{pattr}',)
#   78: 'load_attr'
#   79: ('%c.%[1]{pattr}', 0)
#   80: 'LOAD_FAST'
#   81: 'LOAD_NAME'
#   82: 'LOAD_CLASSNAME'
#   83: 'LOAD_GLOBAL'
#   84: 'LOAD_DEREF'
#   85: 'LOAD_LOCALS'
#   86: ('locals()',)
#   87: 'LOAD_ASSERT'
#   88: 'DELETE_FAST'
#   89: ('%|del %{pattr}\n',)
#   90: 'DELETE_NAME'
#   91: 'DELETE_GLOBAL'
#   92: 'delete_subscr'
#   93: ('%|del %c[%c]\n', 0, 1)
#   94: 'binary_subscr'
#   95: ('%c[%p]', 0, (1, 100))
#   96: 'binary_subscr2'
#   97: 'store_subscr'
#   98: ('%c[%c]', 0, 1)
#   99: 'STORE_FAST'
#  100: 'STORE_NAME'
#  101: 'STORE_GLOBAL'
#  102: 'STORE_DEREF'
#  103: 'unpack'
#  104: ('%C%,', (1, 5, ', '))
#  105: 'unpack_w_parens'
#  106: ('(%C%,)', (1, 10, ', '))
#  107: 'unpack_list'
#  108: ('[%C]', (1, 15, ', '))
#  109: 'build_tuple2'
#  110: ('%P', (0, -1, ', ', 100))
#  111: 'list_iter'
#  112: ('%c', 0)
#  113: 'list_for'
#  114: (' for %c in %c%c', 2, 0, 3)
#  115: 'list_if'
#  116: (' if %c%c', 0, 2)
#  117: 'list_if_not'
#  118: (' if not %p%c', (0, 22), 2)
#  119: 'lc_body'
#  120: ('',)
#  121: 'comp_body'
#  122: 'set_comp_body'
#  123: 'gen_comp_body'
#  124: 'dict_comp_body'
#  125: ('%c:%c', 1, 0)
#  126: 'assign'
#  127: ('%|%c = %p\n', -1, (0, 200))
#  128: 'augassign1'
#  129: ('%|%c %c %c\n', 0, 2, 1)
#  130: 'augassign2'
#  131: ('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4)
#  132: 'designList'
#  133: ('%c = %c', 0, -1)
#  134: 'and'
#  135: ('%c and %c', 0, 2)
#  136: 'ret_and'
#  137: 'and2'
#  138: ('%c', 3)
#  139: 'or'
#  140: ('%c or %c', 0, 2)
#  141: 'ret_or'
#  142: 'conditional'
#  143: ('%p if %p else %p', (2, 27), (0, 27), (4, 27))
#  144: 'conditionalTrue'
#  145: ('%p if 1 else %p', (0, 27), (2, 27))
#  146: 'ret_cond'
#  147: ('%p if %p else %p', (2, 27), (0, 27), (-1, 27))
#  148: 'conditionalnot'
#  149: ('%p if not %p else %p', (2, 27), (0, 22), (4, 27))
#  150: 'ret_cond_not'
#  151: ('%p if not %p else %p', (2, 27), (0, 22), (-1, 27))
#  152: 'conditional_lambda'
#  153: ('(%c if %c else %c)', 2, 0, 3)
#  154: 'return_lambda'
#  155: 'compare'
#  156: ('%p %[-1]{pattr} %p', (0, 19), (1, 19))
#  157: 'cmp_list'
#  158: ('%p %p', (0, 29), (1, 30))
#  159: 'cmp_list1'
#  160: ('%[3]{pattr} %p %p', (0, 19), (-2, 19))
#  161: 'cmp_list2'
#  162: ('%[1]{pattr} %p', (0, 19))
#  163: 'funcdef'
#  164: ('\n\n%|def %c\n', -2)
#  165: 'funcdefdeco'
#  166: ('\n\n%c', 0)
#  167: 'mkfuncdeco'
#  168: ('%|@%c\n%c', 0, 1)
#  169: 'mkfuncdeco0'
#  170: ('%|def %c\n', 0)
#  171: 'classdefdeco'
#  172: 'classdefdeco1'
#  173: 'kwarg'
#  174: ('%[0]{pattr}=%c', 1)
#  175: 'kwargs'
#  176: ('%D', (0, 10000, ', '))
#  177: 'assert_expr_or'
#  178: ('%|print %c%c,\n', 0, 2)
#  179: ('%|print %c%c\n', 0, 2)
#  180: (', %c', 0)
#  181: ('%|print\n',)
#  182: ('%|print >> %c, %c,\n', 0, 1)
#  183: ('%|print >> %c, %c\n', 0, 1)
#  184: ('%|print >> %c\n', 0)
#  185: ('%C', (0, 2, ', '))
#  186: ('%c: %c', 3, 1)
#  187: ('%c: %c', 1, 2)
#  188: ('assert_expr_and', 'print_items_stmt', 'print_items_nl_stmt', 'print_item', 'print_nl', 'print_to', 'print_to_nl', 'print_nl_to', 'print_to_items', 'kv', 'kv2')
#  189: None
# Names:
#    0: TABLE_DIRECT
  1:           0 BUILD_MAP            0
               2 LOAD_CONST           ("BINARY_ADD")

  2:           4 LOAD_CONST           (('+',))

  3:           6 MAP_ADD              1
               8 LOAD_CONST           ("BINARY_SUBTRACT")

  5:          10 LOAD_CONST           (('-',))

  7:          12 MAP_ADD              1
              14 LOAD_CONST           ("BINARY_MULTIPLY")

 10:          16 LOAD_CONST           (('*',))

 13:          18 MAP_ADD              1
              20 LOAD_CONST           ("BINARY_DIVIDE")

 17:          22 LOAD_CONST           (('/',))

 21:          24 MAP_ADD              1
              26 LOAD_CONST           ("BINARY_MATRIX_MULTIPLY")

 26:          28 LOAD_CONST           (('@',))

 31:          30 MAP_ADD              1
              32 LOAD_CONST           ("BINARY_TRUE_DIVIDE")

 37:          34 LOAD_CONST           (('/',))

 43:          36 MAP_ADD              1
              38 LOAD_CONST           ("BINARY_FLOOR_DIVIDE")

 50:          40 LOAD_CONST           (('//',))

 57:          42 MAP_ADD              1
              44 LOAD_CONST           ("BINARY_MODULO")

 65:          46 LOAD_CONST           (('%%',))

 73:          48 MAP_ADD              1
              50 LOAD_CONST           ("BINARY_POWER")

 82:          52 LOAD_CONST           (('**',))

 91:          54 MAP_ADD              1
              56 LOAD_CONST           ("BINARY_LSHIFT")

101:          58 LOAD_CONST           (('<<',))

111:          60 MAP_ADD              1
              62 LOAD_CONST           ("BINARY_RSHIFT")

122:          64 LOAD_CONST           (('>>',))

133:          66 MAP_ADD              1
              68 LOAD_CONST           ("BINARY_AND")

145:          70 LOAD_CONST           (('&',))

157:          72 MAP_ADD              1
              74 LOAD_CONST           ("BINARY_OR")

170:          76 LOAD_CONST           (('|',))

183:          78 MAP_ADD              1
              80 LOAD_CONST           ("BINARY_XOR")

197:          82 LOAD_CONST           (('^',))

211:          84 MAP_ADD              1
              86 LOAD_CONST           ("INPLACE_ADD")

226:          88 LOAD_CONST           (('+=',))

241:          90 MAP_ADD              1
              92 LOAD_CONST           ("INPLACE_SUBTRACT")

257:          94 LOAD_CONST           (('-=',))

273:          96 MAP_ADD              1
              98 LOAD_CONST           ("INPLACE_MULTIPLY")

290:         100 LOAD_CONST           (('*=',))
             102 MAP_ADD              1

307:         104 BUILD_MAP            0
             106 LOAD_CONST           ("INPLACE_MATRIX_MULTIPLY")

325:         108 LOAD_CONST           (('@=',))

343:         110 MAP_ADD              1
             112 LOAD_CONST           ("INPLACE_DIVIDE")

362:         114 LOAD_CONST           (('/=',))

381:         116 MAP_ADD              1
             118 LOAD_CONST           ("INPLACE_TRUE_DIVIDE")

401:         120 LOAD_CONST           (('/=',))

421:         122 MAP_ADD              1
             124 LOAD_CONST           ("INPLACE_FLOOR_DIVIDE")

442:         126 LOAD_CONST           (('//=',))

463:         128 MAP_ADD              1
             130 LOAD_CONST           ("INPLACE_MODULO")

485:         132 LOAD_CONST           (('%%=',))

507:         134 MAP_ADD              1
             136 LOAD_CONST           ("INPLACE_POWER")

530:         138 LOAD_CONST           (('**=',))

553:         140 MAP_ADD              1
             142 LOAD_CONST           ("INPLACE_LSHIFT")

577:         144 LOAD_CONST           (('<<=',))

601:         146 MAP_ADD              1
             148 LOAD_CONST           ("INPLACE_RSHIFT")

626:         150 LOAD_CONST           (('>>=',))

651:         152 MAP_ADD              1
             154 LOAD_CONST           ("INPLACE_AND")

677:         156 LOAD_CONST           (('&=',))

703:         158 MAP_ADD              1
             160 LOAD_CONST           ("INPLACE_OR")

730:         162 LOAD_CONST           (('|=',))

757:         164 MAP_ADD              1
             166 LOAD_CONST           ("INPLACE_XOR")

785:         168 LOAD_CONST           (('^=',))

813:         170 MAP_ADD              1
             172 LOAD_CONST           ("binary_expr")

842:         174 LOAD_CONST           (('%c %c %c', 0, -1, 1))

871:         176 MAP_ADD              1
             178 LOAD_CONST           ("UNARY_POSITIVE")

902:         180 LOAD_CONST           (('+',))

933:         182 MAP_ADD              1
             184 LOAD_CONST           ("UNARY_NEGATIVE")

965:         186 LOAD_CONST           (('-',))

997:         188 MAP_ADD              1
             190 LOAD_CONST           ("UNARY_INVERT")

1030:         192 LOAD_CONST           ("~%c")

1063:         194 MAP_ADD              1
             196 LOAD_CONST           ("unary_expr")

1097:         198 LOAD_CONST           (('%c%c', 1, 0))

1131:         200 MAP_ADD              1
             202 LOAD_CONST           ("unary_not")

1167:         204 LOAD_CONST           (('not %c', 0))
             206 MAP_ADD              1
             208 DICT_UPDATE          1

1203:         210 BUILD_MAP            0
             212 LOAD_CONST           ("unary_convert")

1240:         214 LOAD_CONST           (('`%c`', 0))

1277:         216 MAP_ADD              1
             218 LOAD_CONST           ("get_iter")

1315:         220 LOAD_CONST           (('iter(%c)', 0))

1353:         222 MAP_ADD              1
             224 LOAD_CONST           ("slice0")

1392:         226 LOAD_CONST           (('%c[:]', 0))

1431:         228 MAP_ADD              1
             230 LOAD_CONST           ("slice1")

1471:         232 LOAD_CONST           (('%c[%p:]', 0, (1, 100)))

1511:         234 MAP_ADD              1
             236 LOAD_CONST           ("slice2")

1552:         238 LOAD_CONST           (('%c[:%p]', 0, (1, 100)))

1593:         240 MAP_ADD              1
             242 LOAD_CONST           ("slice3")

1635:         244 LOAD_CONST           (('%c[%p:%p]', 0, (1, 100), (2, 100)))

1677:         246 MAP_ADD              1
             248 LOAD_CONST           ("IMPORT_FROM")

1721:         250 LOAD_CONST           (('%{pattr}',))

1765:         252 MAP_ADD              1
             254 LOAD_CONST           ("load_attr")

1810:         256 LOAD_CONST           (('%c.%[1]{pattr}', 0))

1855:         258 MAP_ADD              1
             260 LOAD_CONST           ("LOAD_FAST")

1901:         262 LOAD_CONST           (('%{pattr}',))

1947:         264 MAP_ADD              1
             266 LOAD_CONST           ("LOAD_NAME")

1994:         268 LOAD_CONST           (('%{pattr}',))

2041:         270 MAP_ADD              1
             272 LOAD_CONST           ("LOAD_CLASSNAME")

2089:         274 LOAD_CONST           (('%{pattr}',))

2137:         276 MAP_ADD              1
             278 LOAD_CONST           ("LOAD_GLOBAL")

2186:         280 LOAD_CONST           (('%{pattr}',))

2235:         282 MAP_ADD              1
             284 LOAD_CONST           ("LOAD_DEREF")

2285:         286 LOAD_CONST           (('%{pattr}',))

2335:         288 MAP_ADD              1
             290 LOAD_CONST           ("LOAD_LOCALS")

2386:         292 LOAD_CONST           (('locals()',))

2437:         294 MAP_ADD              1
             296 LOAD_CONST           ("LOAD_ASSERT")

2489:         298 LOAD_CONST           (('%{pattr}',))

2541:         300 MAP_ADD              1
             302 LOAD_CONST           ("DELETE_FAST")

2594:         304 LOAD_CONST           (('%|del %{pattr}\n',))

2647:         306 MAP_ADD              1
             308 LOAD_CONST           ("DELETE_NAME")

2701:         310 LOAD_CONST           (('%|del %{pattr}\n',))
             312 MAP_ADD              1
             314 DICT_UPDATE          1

2755:         316 BUILD_MAP            0
             318 LOAD_CONST           ("DELETE_GLOBAL")

2810:         320 LOAD_CONST           (('%|del %{pattr}\n',))

2865:         322 MAP_ADD              1
             324 LOAD_CONST           ("delete_subscr")

2921:         326 LOAD_CONST           (('%|del %c[%c]\n', 0, 1))

2977:         328 MAP_ADD              1
             330 LOAD_CONST           ("binary_subscr")

3034:         332 LOAD_CONST           (('%c[%p]', 0, (1, 100)))

3091:         334 MAP_ADD              1
             336 LOAD_CONST           ("binary_subscr2")

3149:         338 LOAD_CONST           (('%c[%p]', 0, (1, 100)))

3207:         340 MAP_ADD              1
             342 LOAD_CONST           ("store_subscr")

3266:         344 LOAD_CONST           (('%c[%c]', 0, 1))

3325:         346 MAP_ADD              1
             348 LOAD_CONST           ("STORE_FAST")

3385:         350 LOAD_CONST           (('%{pattr}',))

3445:         352 MAP_ADD              1
             354 LOAD_CONST           ("STORE_NAME")

3506:         356 LOAD_CONST           (('%{pattr}',))

3567:         358 MAP_ADD              1
             360 LOAD_CONST           ("STORE_GLOBAL")

3629:         362 LOAD_CONST           (('%{pattr}',))

3691:         364 MAP_ADD              1
             366 LOAD_CONST           ("STORE_DEREF")

3754:         368 LOAD_CONST           (('%{pattr}',))

3817:         370 MAP_ADD              1
             372 LOAD_CONST           ("unpack")

3881:         374 LOAD_CONST           (('%C%,', (1, 5, ', ')))

3945:         376 MAP_ADD              1
             378 LOAD_CONST           ("unpack_w_parens")

4010:         380 LOAD_CONST           (('(%C%,)', (1, 10, ', ')))

4075:         382 MAP_ADD              1
             384 LOAD_CONST           ("unpack_list")

4142:         386 LOAD_CONST           (('[%C]', (1, 15, ', ')))

4209:         388 MAP_ADD              1
             390 LOAD_CONST           ("build_tuple2")

4277:         392 LOAD_CONST           (('%P', (0, -1, ', ', 100)))

4345:         394 MAP_ADD              1
             396 LOAD_CONST           ("list_iter")

4415:         398 LOAD_CONST           (('%c', 0))

4485:         400 MAP_ADD              1
             402 LOAD_CONST           ("list_for")

4556:         404 LOAD_CONST           ((' for %c in %c%c', 2, 0, 3))

4627:         406 MAP_ADD              1
             408 LOAD_CONST           ("list_if")

4699:         410 LOAD_CONST           ((' if %c%c', 0, 2))

4771:         412 MAP_ADD              1
             414 LOAD_CONST           ("list_if_not")

4844:         416 LOAD_CONST           ((' if not %p%c', (0, 22), 2))
             418 MAP_ADD              1
             420 DICT_UPDATE          1

4917:         422 BUILD_MAP            0
             424 LOAD_CONST           ("lc_body")

4991:         426 LOAD_CONST           (('',))

5065:         428 MAP_ADD              1
             430 LOAD_CONST           ("comp_body")

5141:         432 LOAD_CONST           (('',))

5217:         434 MAP_ADD              1
             436 LOAD_CONST           ("set_comp_body")

5294:         438 LOAD_CONST           (('%c', 0))

5371:         440 MAP_ADD              1
             442 LOAD_CONST           ("gen_comp_body")

5449:         444 LOAD_CONST           (('%c', 0))

5527:         446 MAP_ADD              1
             448 LOAD_CONST           ("dict_comp_body")

5606:         450 LOAD_CONST           (('%c:%c', 1, 0))

5685:         452 MAP_ADD              1
             454 LOAD_CONST           ("assign")

5766:         456 LOAD_CONST           (('%|%c = %p\n', -1, (0, 200)))

5847:         458 MAP_ADD              1
             460 LOAD_CONST           ("augassign1")

5930:         462 LOAD_CONST           (('%|%c %c %c\n', 0, 2, 1))

6013:         464 MAP_ADD              1
             466 LOAD_CONST           ("augassign2")

6098:         468 LOAD_CONST           (('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4))

6183:         470 MAP_ADD              1
             472 LOAD_CONST           ("designList")

6269:         474 LOAD_CONST           (('%c = %c', 0, -1))

6355:         476 MAP_ADD              1
             478 LOAD_CONST           ("and")

6442:         480 LOAD_CONST           (('%c and %c', 0, 2))

6529:         482 MAP_ADD              1
             484 LOAD_CONST           ("ret_and")

6617:         486 LOAD_CONST           (('%c and %c', 0, 2))

6705:         488 MAP_ADD              1
             490 LOAD_CONST           ("and2")

6794:         492 LOAD_CONST           (('%c', 3))

6883:         494 MAP_ADD              1
             496 LOAD_CONST           ("or")

6973:         498 LOAD_CONST           (('%c or %c', 0, 2))

7063:         500 MAP_ADD              1
             502 LOAD_CONST           ("ret_or")

7154:         504 LOAD_CONST           (('%c or %c', 0, 2))

7245:         506 MAP_ADD              1
             508 LOAD_CONST           ("conditional")

7337:         510 LOAD_CONST           (('%p if %p else %p', (2, 27), (0, 27), (4, 27)))

7429:         512 MAP_ADD              1
             514 LOAD_CONST           ("conditionalTrue")

7522:         516 LOAD_CONST           (('%p if 1 else %p', (0, 27), (2, 27)))

7615:         518 MAP_ADD              1
             520 LOAD_CONST           ("ret_cond")

7709:         522 LOAD_CONST           (('%p if %p else %p', (2, 27), (0, 27), (-1, 27)))
             524 MAP_ADD              1
             526 DICT_UPDATE          1

7803:         528 BUILD_MAP            0
             530 LOAD_CONST           ("conditionalnot")

7898:         532 LOAD_CONST           (('%p if not %p else %p', (2, 27), (0, 22), (4, 27)))

7993:         534 MAP_ADD              1
             536 LOAD_CONST           ("ret_cond_not")

8089:         538 LOAD_CONST           (('%p if not %p else %p', (2, 27), (0, 22), (-1, 27)))

8185:         540 MAP_ADD              1
             542 LOAD_CONST           ("conditional_lambda")

8282:         544 LOAD_CONST           (('(%c if %c else %c)', 2, 0, 3))

8379:         546 MAP_ADD              1
             548 LOAD_CONST           ("return_lambda")

8477:         550 LOAD_CONST           (('%c', 0))

8575:         552 MAP_ADD              1
             554 LOAD_CONST           ("compare")

8674:         556 LOAD_CONST           (('%p %[-1]{pattr} %p', (0, 19), (1, 19)))

8773:         558 MAP_ADD              1
             560 LOAD_CONST           ("cmp_list")

8873:         562 LOAD_CONST           (('%p %p', (0, 29), (1, 30)))

8973:         564 MAP_ADD              1
             566 LOAD_CONST           ("cmp_list1")

9074:         568 LOAD_CONST           (('%[3]{pattr} %p %p', (0, 19), (-2, 19)))

9175:         570 MAP_ADD              1
             572 LOAD_CONST           ("cmp_list2")

9277:         574 LOAD_CONST           (('%[1]{pattr} %p', (0, 19)))

9379:         576 MAP_ADD              1
             578 LOAD_CONST           ("funcdef")

9482:         580 LOAD_CONST           (('\n\n%|def %c\n', -2))

9585:         582 MAP_ADD              1
             584 LOAD_CONST           ("funcdefdeco")

9689:         586 LOAD_CONST           (('\n\n%c', 0))

9793:         588 MAP_ADD              1
             590 LOAD_CONST           ("mkfuncdeco")

9898:         592 LOAD_CONST           (('%|@%c\n%c', 0, 1))

10003:         594 MAP_ADD              1
             596 LOAD_CONST           ("mkfuncdeco0")

10109:         598 LOAD_CONST           (('%|def %c\n', 0))

10215:         600 MAP_ADD              1
             602 LOAD_CONST           ("classdefdeco")

10322:         604 LOAD_CONST           (('\n\n%c', 0))

10429:         606 MAP_ADD              1
             608 LOAD_CONST           ("classdefdeco1")

10537:         610 LOAD_CONST           (('%|@%c\n%c', 0, 1))

10645:         612 MAP_ADD              1
             614 LOAD_CONST           ("kwarg")

10754:         616 LOAD_CONST           (('%[0]{pattr}=%c', 1))

10863:         618 MAP_ADD              1
             620 LOAD_CONST           ("kwargs")

10973:         622 LOAD_CONST           (('%D', (0, 10000, ', ')))

11083:         624 MAP_ADD              1
             626 LOAD_CONST           ("assert_expr_or")

11195:         628 LOAD_CONST           (('%c or %c', 0, 2))
             630 MAP_ADD              1

11307:         632 DICT_UPDATE          1

11420:         634 LOAD_CONST           (('%c and %c', 0, 2))

11421:         636 LOAD_CONST           (('%|print %c%c,\n', 0, 2))

11422:         638 LOAD_CONST           (('%|print %c%c\n', 0, 2))

11423:         640 LOAD_CONST           ((', %c', 0))

11424:         642 LOAD_CONST           (('%|print\n',))

11425:         644 LOAD_CONST           (('%|print >> %c, %c,\n', 0, 1))

11426:         646 LOAD_CONST           (('%|print >> %c, %c\n', 0, 1))

11427:         648 LOAD_CONST           (('%|print >> %c\n', 0))

11428:         650 LOAD_CONST           (('%C', (0, 2, ', ')))

11429:         652 LOAD_CONST           (('%c: %c', 3, 1))

11430:         654 LOAD_CONST           (('%c: %c', 1, 2))
             656 LOAD_CONST           (('assert_expr_and', 'print_items_stmt', 'print_items_nl_stmt', 'print_item', 'print_nl', 'print_to', 'print_to_nl', 'print_nl_to', 'print_to_items', 'kv', 'kv2'))
             658 BUILD_CONST_KEY_MAP  11
             660 DICT_UPDATE          1
             662 STORE_NAME           (TABLE_DIRECT)
             664 LOAD_CONST           (None)

11553:         666 RETURN_VALUE

